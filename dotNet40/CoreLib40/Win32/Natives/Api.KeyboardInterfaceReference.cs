#region File Notice
// Created at: 2013/12/24 3:43 PM
// Last Update time: 2013/12/24 4:05 PM
// Last Updated by: Mohammad Mir mostafa
#endregion

using System;
using System.Runtime.InteropServices;

namespace Library40.Win32.Natives
{
	public static partial class Api
	{
		/// <summary>
		///     The RegisterHotKey function defines a system-wide hot key.
		/// </summary>
		/// <param name="hWnd">
		///     [in] Handle to the window that will receive WM_HOTKEY messages generated by the hot key. If this
		///     parameter is NULL, WM_HOTKEY messages are posted to the message queue of the calling thread and must be processed
		///     in the message loop.
		/// </param>
		/// <param name="id">
		///     in] Specifies the identifier of the hot key. No other hot key in the calling thread should have the
		///     same identifier. An application must specify a value in the range 0x0000 through 0xBFFF. A shared DLL must specify
		///     a value in the range 0xC000 through 0xFFFF (the range returned by the GlobalAddAtom function). To avoid conflicts
		///     with hot-key identifiers defined by other shared DLLs, a DLL should use the GlobalAddAtom function to obtain the
		///     hot-key identifier.
		/// </param>
		/// <param name="fsModifiers">
		///     [in] Specifies keys that must be pressed in combination with the key specified by the
		///     uVirtKey parameter in order to generate the WM_HOTKEY message. The fsModifiers parameter can be a combination of
		///     the following values.
		/// </param>
		/// <param name="vk">[in] Specifies the virtual-key code of the hot key.</param>
		/// <returns>
		///     If the function succeeds, the return value is nonzero.
		///     If the function fails, the return value is zero. To get extended error information, call GetLastError.
		/// </returns>
		[DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
		public static extern Boolean RegisterHotKey(IntPtr hWnd, int id, UInt32 fsModifiers, UInt32 vk);

		/// <summary>
		///     The UnregisterHotKey function frees a hot key previously registered by the calling thread.
		/// </summary>
		/// <param name="hWnd">
		///     [in] Handle to the window associated with the hot key to be freed. This parameter should be NULL if
		///     the hot key is not associated with a window.
		/// </param>
		/// <param name="id">[in] Specifies the identifier of the hot key to be freed.</param>
		/// <returns>
		///     If the function succeeds, the return value is nonzero.
		///     If the function fails, the return value is zero. To get extended error information, call GetLastError.
		/// </returns>
		[DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
		public static extern Boolean UnregisterHotKey(IntPtr hWnd, int id);
	}
}